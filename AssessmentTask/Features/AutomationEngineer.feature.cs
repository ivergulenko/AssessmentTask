// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AssessmentTask.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AutomationEngineer")]
    public partial class AutomationEngineerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AutomationEngineer.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AutomationEngineer", "\tAutomation of Automation engineer level sub api route", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table1.AddRow(new string[] {
                        "username",
                        "testUser"});
            table1.AddRow(new string[] {
                        "password",
                        "test"});
            table1.AddRow(new string[] {
                        "grant_type",
                        "password"});
#line 5
 testRunner.Given("I\'m authorized to API", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post request for companies adds new company")]
        [NUnit.Framework.CategoryAttribute("CleanTestData")]
        public virtual void PostRequestForCompaniesAddsNewCompany()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post request for companies adds new company", new string[] {
                        "CleanTestData"});
#line 12
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table2.AddRow(new string[] {
                        "Name",
                        "TestCompany"});
#line 13
 testRunner.When("I send Post request to create \"company\"", ((string)(null)), table2, "When ");
#line 16
 testRunner.And("I get all \"company\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.Then("1 companies are returned in response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table3.AddRow(new string[] {
                        "TestCompany"});
#line 18
 testRunner.And("companies list contains companies", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GetAll request for companies returns correct results")]
        [NUnit.Framework.CategoryAttribute("CleanTestData")]
        public virtual void GetAllRequestForCompaniesReturnsCorrectResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetAll request for companies returns correct results", new string[] {
                        "CleanTestData"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table4.AddRow(new string[] {
                        "Name",
                        "TestCompany"});
            table4.AddRow(new string[] {
                        "Name",
                        "TestCompany1"});
#line 25
 testRunner.When("I send Post request to create \"company\"", ((string)(null)), table4, "When ");
#line 29
 testRunner.And("I get all \"company\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.Then("2 companies are returned in response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table5.AddRow(new string[] {
                        "TestCompany"});
            table5.AddRow(new string[] {
                        "TestCompany1"});
#line 31
 testRunner.And("companies list contains companies", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GetById request for companies returns correct results")]
        [NUnit.Framework.CategoryAttribute("CleanTestData")]
        public virtual void GetByIdRequestForCompaniesReturnsCorrectResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetById request for companies returns correct results", new string[] {
                        "CleanTestData"});
#line 38
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table6.AddRow(new string[] {
                        "Name",
                        "TestCompany"});
            table6.AddRow(new string[] {
                        "Name",
                        "TestCompany1"});
#line 39
 testRunner.When("I send Post request to create \"company\"", ((string)(null)), table6, "When ");
#line 43
 testRunner.And("I get all \"company\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.And("I send GetById request for \"company\" with name \"TestCompany\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table7.AddRow(new string[] {
                        "TestCompany"});
#line 45
 testRunner.Then("companies response contains correct values", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DeleteById request for companies deletes company")]
        [NUnit.Framework.CategoryAttribute("CleanTestData")]
        public virtual void DeleteByIdRequestForCompaniesDeletesCompany()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DeleteById request for companies deletes company", new string[] {
                        "CleanTestData"});
#line 50
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table8.AddRow(new string[] {
                        "Name",
                        "TestCompany"});
            table8.AddRow(new string[] {
                        "Name",
                        "TestCompany1"});
#line 51
 testRunner.When("I send Post request to create \"company\"", ((string)(null)), table8, "When ");
#line 55
 testRunner.And("I get all \"company\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
 testRunner.And("I send DeleteById request for \"company\" with name \"TestCompany\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.And("I get all \"company\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
 testRunner.Then("1 companies are returned in response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table9.AddRow(new string[] {
                        "TestCompany"});
#line 59
 testRunner.And("companies list doesn\'t contain company", ((string)(null)), table9, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Error is returned on attempt to get company by non existing id")]
        [NUnit.Framework.CategoryAttribute("CleanTestData")]
        public virtual void ErrorIsReturnedOnAttemptToGetCompanyByNonExistingId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned on attempt to get company by non existing id", new string[] {
                        "CleanTestData"});
#line 64
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 65
 testRunner.When("I get all \"company\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
 testRunner.Then("0 companies are returned in response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 67
 testRunner.When("I send GetById request for \"company\" with id 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
 testRunner.Then("error status code \"NotFound\" is returned in response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Error is returned on attempt to delete company by non existing id")]
        [NUnit.Framework.CategoryAttribute("CleanTestData")]
        public virtual void ErrorIsReturnedOnAttemptToDeleteCompanyByNonExistingId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned on attempt to delete company by non existing id", new string[] {
                        "CleanTestData"});
#line 71
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 72
 testRunner.When("I get all \"company\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
 testRunner.Then("0 companies are returned in response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 74
 testRunner.When("I send DeleteById request for \"company\" with id 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.Then("error status code \"NotFound\" is returned in response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post request for companies returns error for empty Name parameter")]
        [NUnit.Framework.CategoryAttribute("CleanTestData")]
        public virtual void PostRequestForCompaniesReturnsErrorForEmptyNameParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post request for companies returns error for empty Name parameter", new string[] {
                        "CleanTestData"});
#line 78
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table10.AddRow(new string[] {
                        "Name",
                        ""});
#line 79
 testRunner.When("I send Post request to create \"company\"", ((string)(null)), table10, "When ");
#line 82
 testRunner.Then("response contains error status code \"BadRequest\" and error message \"Invalid reque" +
                    "st.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post request for companies returns error for incorrect parameter")]
        [NUnit.Framework.CategoryAttribute("CleanTestData")]
        public virtual void PostRequestForCompaniesReturnsErrorForIncorrectParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post request for companies returns error for incorrect parameter", new string[] {
                        "CleanTestData"});
#line 85
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table11.AddRow(new string[] {
                        "id",
                        "18"});
#line 86
 testRunner.When("I send Post request to create \"company\"", ((string)(null)), table11, "When ");
#line 89
 testRunner.Then("response contains error status code \"BadRequest\" and error message \"Invalid reque" +
                    "st.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post request for companies returns error on adding company with existing name")]
        [NUnit.Framework.CategoryAttribute("CleanTestData")]
        public virtual void PostRequestForCompaniesReturnsErrorOnAddingCompanyWithExistingName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post request for companies returns error on adding company with existing name", new string[] {
                        "CleanTestData"});
#line 92
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table12.AddRow(new string[] {
                        "Name",
                        "TestCompany"});
#line 93
 testRunner.When("I send Post request to create \"company\"", ((string)(null)), table12, "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table13.AddRow(new string[] {
                        "Name",
                        "TestCompany"});
#line 96
 testRunner.And("I send Post request to create \"company\"", ((string)(null)), table13, "And ");
#line 99
 testRunner.Then("response contains error status code \"BadRequest\" and error message \"Duplicate res" +
                    "ults found for identifier.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post request for employees adds new employee")]
        [NUnit.Framework.CategoryAttribute("CleanTestData")]
        public virtual void PostRequestForEmployeesAddsNewEmployee()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post request for employees adds new employee", new string[] {
                        "CleanTestData"});
#line 102
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table14.AddRow(new string[] {
                        "Name",
                        "Patric"});
#line 103
 testRunner.When("I send Post request to create \"employee\"", ((string)(null)), table14, "When ");
#line 106
 testRunner.And("I get all \"employee\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
 testRunner.Then("1 employees are returned in response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table15.AddRow(new string[] {
                        "Patric"});
#line 108
 testRunner.And("employees list contains employees", ((string)(null)), table15, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GetAll request for employees returns correct results")]
        [NUnit.Framework.CategoryAttribute("CleanTestData")]
        public virtual void GetAllRequestForEmployeesReturnsCorrectResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetAll request for employees returns correct results", new string[] {
                        "CleanTestData"});
#line 113
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table16.AddRow(new string[] {
                        "Name",
                        "John Snow"});
            table16.AddRow(new string[] {
                        "Name",
                        "Aria Stark"});
#line 114
 testRunner.When("I send Post request to create \"employee\"", ((string)(null)), table16, "When ");
#line 118
 testRunner.And("I get all \"employee\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 119
 testRunner.Then("2 employees are returned in response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table17.AddRow(new string[] {
                        "John Snow"});
            table17.AddRow(new string[] {
                        "Aria Stark"});
#line 120
 testRunner.And("employees list contains employees", ((string)(null)), table17, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("GetById request for employees returns correct results")]
        [NUnit.Framework.CategoryAttribute("CleanTestData")]
        public virtual void GetByIdRequestForEmployeesReturnsCorrectResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetById request for employees returns correct results", new string[] {
                        "CleanTestData"});
#line 126
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table18.AddRow(new string[] {
                        "Name",
                        "Sam Smith"});
            table18.AddRow(new string[] {
                        "Name",
                        "John Dow"});
#line 127
 testRunner.When("I send Post request to create \"employee\"", ((string)(null)), table18, "When ");
#line 131
 testRunner.And("I get all \"employee\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 132
 testRunner.And("I send GetById request for \"employee\" with name \"Sam Smith\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table19.AddRow(new string[] {
                        "Sam Smith"});
#line 133
 testRunner.Then("employees response contains correct values", ((string)(null)), table19, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DeleteById request for employees deletes employee")]
        [NUnit.Framework.CategoryAttribute("CleanTestData")]
        public virtual void DeleteByIdRequestForEmployeesDeletesEmployee()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DeleteById request for employees deletes employee", new string[] {
                        "CleanTestData"});
#line 138
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table20.AddRow(new string[] {
                        "Name",
                        "Jane Dow"});
            table20.AddRow(new string[] {
                        "Name",
                        "Clark Kent"});
#line 139
 testRunner.When("I send Post request to create \"employee\"", ((string)(null)), table20, "When ");
#line 143
 testRunner.And("I get all \"employee\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
 testRunner.And("I send DeleteById request for \"employee\" with name \"Clark Kent\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
 testRunner.And("I get all \"employee\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
 testRunner.Then("1 employees are returned in response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table21.AddRow(new string[] {
                        "Clark Kent"});
#line 147
 testRunner.And("employees list doesn\'t contain employee", ((string)(null)), table21, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Error is returned on attempt to get employee by non existing id")]
        [NUnit.Framework.CategoryAttribute("CleanTestData")]
        public virtual void ErrorIsReturnedOnAttemptToGetEmployeeByNonExistingId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned on attempt to get employee by non existing id", new string[] {
                        "CleanTestData"});
#line 152
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 153
 testRunner.When("I get all \"employee\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 154
 testRunner.Then("0 employees are returned in response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 155
 testRunner.When("I send GetById request for \"employee\" with id 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 156
 testRunner.Then("error status code \"NotFound\" is returned in response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Error is returned on attempt to delete employee by non existing id")]
        [NUnit.Framework.CategoryAttribute("CleanTestData")]
        public virtual void ErrorIsReturnedOnAttemptToDeleteEmployeeByNonExistingId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned on attempt to delete employee by non existing id", new string[] {
                        "CleanTestData"});
#line 159
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line 160
 testRunner.When("I get all \"employee\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 161
 testRunner.Then("0 employees are returned in response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 162
 testRunner.When("I send DeleteById request for \"employee\" with id 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 163
 testRunner.Then("error status code \"NotFound\" is returned in response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post request for employees returns error for empty Name parameter")]
        [NUnit.Framework.CategoryAttribute("CleanTestData")]
        public virtual void PostRequestForEmployeesReturnsErrorForEmptyNameParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post request for employees returns error for empty Name parameter", new string[] {
                        "CleanTestData"});
#line 166
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table22.AddRow(new string[] {
                        "Name",
                        ""});
#line 167
 testRunner.When("I send Post request to create \"employee\"", ((string)(null)), table22, "When ");
#line 170
 testRunner.Then("response contains error status code \"BadRequest\" and error message \"Invalid reque" +
                    "st.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post request for employees returns error for incorrect parameter")]
        [NUnit.Framework.CategoryAttribute("CleanTestData")]
        public virtual void PostRequestForEmployeesReturnsErrorForIncorrectParameter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post request for employees returns error for incorrect parameter", new string[] {
                        "CleanTestData"});
#line 173
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table23.AddRow(new string[] {
                        "id",
                        "18"});
#line 174
 testRunner.When("I send Post request to create \"employee\"", ((string)(null)), table23, "When ");
#line 177
 testRunner.Then("response contains error status code \"BadRequest\" and error message \"Invalid reque" +
                    "st.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post request for employees returns error on adding employee with existing name")]
        [NUnit.Framework.CategoryAttribute("CleanTestData")]
        public virtual void PostRequestForEmployeesReturnsErrorOnAddingEmployeeWithExistingName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post request for employees returns error on adding employee with existing name", new string[] {
                        "CleanTestData"});
#line 181
this.ScenarioSetup(scenarioInfo);
#line 4
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table24.AddRow(new string[] {
                        "Name",
                        "Luke  Skywalker"});
#line 182
 testRunner.When("I send Post request to create \"employee\"", ((string)(null)), table24, "When ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table25.AddRow(new string[] {
                        "Name",
                        "Luke  Skywalker"});
#line 185
 testRunner.And("I send Post request to create \"employee\"", ((string)(null)), table25, "And ");
#line 188
 testRunner.Then("response contains error status code \"BadRequest\" and error message \"Duplicate res" +
                    "ults found for identifier.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
